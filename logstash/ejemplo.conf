input {
  file {
    path => "C:/ELK/logs/1344438602-6.csv"
    start_position => "beginning"
    sincedb_path => "NUL"
    codec => plain {
      charset => "ISO-8859-1"
    }
  }
}

filter {
  # Usar tabulaciones como delimitador en lugar de pipes
  grok {
    match => {
      "message" => [
        "%{NUMBER:Dia}\t%{NUMBER:Mes}\t%{NUMBER:Anio}\t%{HOUR:Hora}:%{MINUTE:Minutos}\t%{NUMBER:Latitud:float}\t%{NUMBER:Longitud:float}\t%{NUMBER:Km:int}\t%{WORD:Motor}\t%{GREEDYDATA:Direccion}\t%{GREEDYDATA:Link}"
      ]
    }
    tag_on_failure => ["_grokparsefailure"]
  }

  # Formato de campos de dos dígitos para día, mes, hora y minutos
  ruby {
    code => "
      if event.get('Dia') and event.get('Mes') and event.get('Hora') and event.get('Minutos')
        event.set('Dia', sprintf('%02d', event.get('Dia').to_i))
        event.set('Mes', sprintf('%02d', event.get('Mes').to_i))
        event.set('Hora', sprintf('%02d', event.get('Hora').to_i))
        event.set('Minutos', sprintf('%02d', event.get('Minutos').to_i))
      end
    "
  }

  # Creación del campo "Fecha"
  mutate {
    add_field => {"Fecha" => "%{Anio}-%{Mes}-%{Dia} %{Hora}:%{Minutos}:00"}
  }

  # Convertir el campo de Fecha a un Objeto
  date {
    match => ["Fecha", "yyyy-MM-dd HH:mm:ss"]
    target => "NuevaFecha"
    tag_on_failure => ["_dateparsefailure"]
  }

  mutate {
    rename => {"NuevaFecha" => "Fecha"}
    remove_field => ["@timestamp"]
  }

  # Creación del campo geoespacial junto con latitud y longitud
  mutate {
    add_field => {
      "geospatial" => "https://www.google.com/maps/place/%{Latitud},%{Longitud}"
      "Localizacion" => "%{Latitud},%{Longitud}"
      "[location][lat]" => "%{Latitud}"
      "[location][lon]" => "%{Longitud}"
    }
  }
}

output {
  elasticsearch {
   hosts => ["http://localhost:9200"]
    index => "ejemplo3%{+YYYY.MM.dd}"  
  }
  stdout {
    codec => rubydebug
  }
}
